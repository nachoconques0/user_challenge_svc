// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/challenge/internal/aggregate/user/user.go
//
// Generated by this command:
//
//	mockgen --source=pkg/challenge/internal/aggregate/user/user.go --destination=pkg/challenge/internal/mocks/mock_user_aggregate.go --package=mocks --mock_names=Aggregate=MockUserAggregate
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	user "github.com/nachoconques0/user_challenge_svc/pkg/challenge/internal/entity/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUserAggregate is a mock of Aggregate interface.
type MockUserAggregate struct {
	ctrl     *gomock.Controller
	recorder *MockUserAggregateMockRecorder
	isgomock struct{}
}

// MockUserAggregateMockRecorder is the mock recorder for MockUserAggregate.
type MockUserAggregateMockRecorder struct {
	mock *MockUserAggregate
}

// NewMockUserAggregate creates a new mock instance.
func NewMockUserAggregate(ctrl *gomock.Controller) *MockUserAggregate {
	mock := &MockUserAggregate{ctrl: ctrl}
	mock.recorder = &MockUserAggregateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAggregate) EXPECT() *MockUserAggregateMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserAggregate) Create(ctx context.Context, u *user.Entity) (*user.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, u)
	ret0, _ := ret[0].(*user.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserAggregateMockRecorder) Create(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserAggregate)(nil).Create), ctx, u)
}

// Delete mocks base method.
func (m *MockUserAggregate) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserAggregateMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserAggregate)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockUserAggregate) Find(ctx context.Context, country string, page, limit int) ([]user.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, country, page, limit)
	ret0, _ := ret[0].([]user.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserAggregateMockRecorder) Find(ctx, country, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserAggregate)(nil).Find), ctx, country, page, limit)
}

// Update mocks base method.
func (m *MockUserAggregate) Update(ctx context.Context, u *user.Entity) (*user.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, u)
	ret0, _ := ret[0].(*user.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserAggregateMockRecorder) Update(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserAggregate)(nil).Update), ctx, u)
}
